import{svg}from"lit-element";import{classMap}from"lit-html/directives/class-map.js";import{styleMap}from"lit-html/directives/style-map.js";import{selectUnit}from"@formatjs/intl-utils";import Merge from"./merge";import BaseTool from"./base-tool";import{formatNumber,getDefaultFormatOptions}from"./frontend_mods/format_number";import{formatDate,formatDateMonth,formatDateMonthYear,formatDateShort,formatDateNumeric,formatDateWeekday,formatDateWeekdayDay,formatDateWeekdayShort}from"./frontend_mods/datetime/format_date";import{formatTime,formatTime24h,formatTimeWeekday,formatTimeWithSeconds}from"./frontend_mods/datetime/format_time";import{formatDateTime,formatDateTimeNumeric,formatDateTimeWithSeconds,formatShortDateTime,formatShortDateTimeWithYear}from"./frontend_mods/datetime/format_date_time";import{formatDuration}from"./frontend_mods/datetime/duration";import{computeDomain}from"./frontend_mods/common/entity/compute_domain";export default class EntityStateTool extends BaseTool{constructor(t,e,a){super(t,Merge.mergeDeep({show:{uom:"end"},classes:{tool:{"sak-state":!0,hover:!0},state:{"sak-state__value":!0},uom:{"sak-state__uom":!0}},styles:{tool:{},state:{},uom:{}}},e),a),this.classes.tool={},this.classes.state={},this.classes.uom={},this.styles.tool={},this.styles.state={},this.styles.uom={},this.dev.debug&&console.log("EntityStateTool constructor coords, dimensions",this.coords,this.dimensions,this.svg,this.config)}static testTimeDate=!1;set value(t){super.value=t}formatStateString(e,a){var s=this._card._hass.selectedLanguage||this._card._hass.language,i={};if(i.language=s,["relative","total","datetime","datetime-short","datetime-short_with-year","datetime_seconds","datetime-numeric","date","date_month","date_month_year","date-short","date-numeric","date_weekday","date_weekday_day","date_weekday-short","time","time-24h","time-24h_date-short","time_weekday","time_seconds"].includes(a.format)){var o=new Date(e);if(!(o instanceof Date)||isNaN(o.getTime()))return e;let t;switch(a.format){case"relative":var r=selectUnit(o,new Date);t=new Intl.RelativeTimeFormat(s,{numeric:"auto"}).format(r.value,r.unit);break;case"total":case"precision":t="Not Yet Supported";break;case"datetime":t=formatDateTime(o,i);break;case"datetime-short":t=formatShortDateTime(o,i);break;case"datetime-short_with-year":t=formatShortDateTimeWithYear(o,i);break;case"datetime_seconds":t=formatDateTimeWithSeconds(o,i);break;case"datetime-numeric":t=formatDateTimeNumeric(o,i);break;case"date":t=formatDate(o,i);break;case"date_month":t=formatDateMonth(o,i);break;case"date_month_year":t=formatDateMonthYear(o,i);break;case"date-short":t=formatDateShort(o,i);break;case"date-numeric":t=formatDateNumeric(o,i);break;case"date_weekday":t=formatDateWeekday(o,i);break;case"date_weekday-short":t=formatDateWeekdayShort(o,i);break;case"date_weekday_day":t=formatDateWeekdayDay(o,i);break;case"time":t=formatTime(o,i);break;case"time-24h":t=formatTime24h(o);break;case"time-24h_date-short":r=selectUnit(o,new Date);t=["second","minute","hour"].includes(r.unit)?formatTime24h(o):formatDateShort(o,i);break;case"time_weekday":t=formatTimeWeekday(o,i);break;case"time_seconds":t=formatTimeWithSeconds(o,i)}return t}return isNaN(parseFloat(e))||!isFinite(e)?e:"brightness"===a.format||"brightness_pct"===a.format?Math.round(e/255*100)+" %":"duration"===a.format?formatDuration(e,"s"):void 0}_renderState(){this.MergeAnimationClassIfChanged(),this.MergeAnimationStyleIfChanged(),this.MergeColorFromState(this.styles.state);let t=this._stateValue;var e,a,s,i,o=this._card.entities[this.defaultEntityIndex()];return void 0===o||[void 0,"undefined"].includes(t)||void 0===t?svg``:(e=this._card._hass.entities[o.entity_id],o=this._card._hass.states[o.entity_id],s=this._card.config.entities[this.defaultEntityIndex()],a=computeDomain(this._card.entities[this.defaultEntityIndex()].entity_id),i=this.config.locale_tag?this.config.locale_tag+t.toLowerCase():void 0,((t=void 0!==s.format&&void 0!==t?this.formatStateString(t,s):t)&&isNaN(t)&&!s.secondary_info||s.attribute)&&(t=i&&this._card._hass.localize(i)||e?.translation_key&&this._card._hass.localize(`component.${e.platform}.entity.${a}.${e.translation_key}.state.`+t)||o?.attributes?.device_class&&this._card._hass.localize(`component.${a}.entity_component.${o.attributes.device_class}.state.`+t)||this._card._hass.localize(`component.${a}.entity_component._.state.`+t)||t,t=this.textEllipsis(t,this.config?.show?.ellipsis)),["undefined","unknown","unavailable","-ua-"].includes(t)&&(t=this._card._hass.localize("state.default."+t)),isNaN(t)||(s={},s=getDefaultFormatOptions(t,s),void 0!==this._card.config.entities[this.defaultEntityIndex()].decimals&&(s.maximumFractionDigits=this._card.config.entities[this.defaultEntityIndex()].decimals,s.minimumFractionDigits=s.maximumFractionDigits),i=formatNumber(t,this._card._hass.locale,s),t=i),svg`
      <tspan class="${classMap(this.classes.state)}" x="${this.svg.x}" y="${this.svg.y}"
        style="${styleMap(this.styles.state)}">
        ${this.config?.text?.before?this.config.text.before:""}${t}${this.config?.text?.after?this.config.text.after:""}</tspan>
    `)}_renderUom(){if("none"===this.config.show.uom||void 0===this._stateValue)return svg``;{this.MergeAnimationClassIfChanged(),this.MergeAnimationStyleIfChanged(),this.MergeColorFromState(this.styles.uom);let t=this.styles.state["font-size"],e=.5,a="em";var s=t.match(/\D+|\d*\.?\d+/g),s=(2===s.length?(e=.6*Number(s[0]),a=s[1]):console.error("Cannot determine font-size for state/unit",t),t={"font-size":e+a},this.styles.uom=Merge.mergeDeep(this.config.styles.uom,this.styles.uom,t),this._card._buildUom(this.derivedEntity,this._card.entities[this.defaultEntityIndex()],this._card.config.entities[this.defaultEntityIndex()]));return"end"===this.config.show.uom?svg`
          <tspan class="${classMap(this.classes.uom)}" dx="-0.1em" dy="-0.35em"
            style="${styleMap(this.styles.uom)}">
            ${s}</tspan>
        `:"bottom"===this.config.show.uom?svg`
          <tspan class="${classMap(this.classes.uom)}" x="${this.svg.x}" dy="1.5em"
            style="${styleMap(this.styles.uom)}">
            ${s}</tspan>
        `:"top"===this.config.show.uom?svg`
          <tspan class="${classMap(this.classes.uom)}" x="${this.svg.x}" dy="-1.5em"
            style="${styleMap(this.styles.uom)}">
            ${s}</tspan>
        `:svg``}}firstUpdated(t){}updated(t){}render(){return svg`
    <svg overflow="visible" id="state-${this.toolId}"
      class="${classMap(this.classes.tool)}" style="${styleMap(this.styles.tool)}">
        <text @click=${t=>this.handleTapEvent(t,this.config)}>
          ${this._renderState()}
          ${this._renderUom()}
        </text>
      </svg>
      `}}